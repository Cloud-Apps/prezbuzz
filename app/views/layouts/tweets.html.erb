<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!--
# Copyright (c) 2011 ActiveState Software Inc.
# See the file LICENSE.txt for licensing information.
-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title>CandidateBuzz</title>
  <% if defined? @maxSize %>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.6.1.min.js"></script>
    <script type="text/javascript" src="http://www.google.com/jsapi"></script>
    <script type="text/javascript">
      google.load('visualization', '1', {packages: ['corechart']});
    </script>
    <%= javascript_include_tag 'jqcloud-0.1.8.js' %>
    <%= stylesheet_link_tag 'jqcloud' %>
    <%= javascript_include_tag 'sweetpages' %>
    <%= stylesheet_link_tag 'sweetpages' %>
    <%= javascript_include_tag 'candidateBuzz' %>
    <%= stylesheet_link_tag 'candidateBuzz' %>
    <script type="text/javascript" >
      //<![CDATA[
      var intervalCandidatePosnTweetCounts, clickColumnToDataColumn;
      var candidateNames, isoStartDates, gEndDate;
      function drawVisualization() {
        intervalCandidatePosnTweetCounts = [];
        candidateNames = [];
        candidateAvatars = [];
        isoStartDates = [];
        gEndDate = "<%= @isoFinalEndDate %>";
        gNumRows = <%= @intervalInfo.size %>;
        //alert("In drawVisualization, intervalCandidatePosnTweetCounts = " + intervalCandidatePosnTweetCounts);

        // Create and populate the data table.
        var data = new google.visualization.DataTable(); // Not same as the "dataTable" template parameter
        data.addColumn('string', 'month');
        var fullName, clickCol = 0, dataCol = 0;
        var colors_for_candidates = [];
        clickColumnToDataColumn = [];
        <% @candidates.each do |candidate| %>
          <% if ! @candidates_to_drop[candidate.id]  %>
            lastName = "<%= "#{candidate.lastName}" %>";
            fullName = "<%= "#{candidate.firstName} #{candidate.lastName}"%>";
            data.addColumn('number', fullName)
            candidateNames.push(fullName);
            candidateAvatars.push("/images/" + lastName + ".jpg");
            colors_for_candidates.push("#<%=candidate.color%>")
            clickColumnToDataColumn[clickCol] = dataCol;
            clickCol += 1
          <% end %>
          dataCol += 1
        <% end %>
        <% @intervalInfo.each do |interval|
          num_tweets_by_candidate = interval[:num_tweets_by_candidate]
          startDate = interval[:startDate]
          %>
          isoStartDates.push("<%= startDate %>");
          <% filteredCandidates = @candidates.find_all{|candidate| num_tweets_by_candidate[candidate]} %>
          data.addRow([ "<%= startDate.to_time.localtime.strftime(@formatTimes[0]) %>",
          <%= filteredCandidates.map { |candidate| num_tweets_by_candidate[candidate]}.join(", ") %>]);
          <% @formatTimes.shift if @formatTimes.size > 1 %>
          var thisCandidatePosnTweetCounts = [];
          intervalCandidatePosnTweetCounts.push(thisCandidatePosnTweetCounts);
          <% @candidates.each do |candidate|  %>
            <% if ! @candidates_to_drop[candidate.id]  %>
              thisCandidatePosnTweetCounts.push(<%= num_tweets_by_candidate[candidate] %>)
            <% end %>
          <% end %>
        <% end %>
       
        // Create and draw the visualization.
        var chart = new google.visualization.ColumnChart(document.getElementById('visualization'));
        chart.draw(data, {curveType: "function",
                          enableEvents: true,
                          title: "Tweets per hour",
                          colors: colors_for_candidates,
                          width: 1050, height: 400,
                          vAxis: {maxValue: <%= @maxSize %>}}
                );
        var pluralizeWord = function(word, count) {
          if (count == 1) return word;
          return word + "s";
        };
        var mouseEventHandler = function() {
          var dataColumn, clickColumn, selection = chart.getSelection()[0];
          if (!selection) {
            return;
          }
          row = selection.row;
          clickColumn = selection.column - 1; // col 0 for date
          dataColumn = clickColumnToDataColumn[clickColumn];
          //alert("pressed row " + row + ", col " + column)
          var twitterLink = document.getElementById('twitterLink');
          var selectedColumn = document.getElementById('selectedColumn');
          twitterLink.style.display = "block";
          console.log("Column: " + dataColumn + ": " + candidateNames[clickColumn]);
          var candidateName = candidateNames[clickColumn];
          $("body").attr("class", candidateName);
          
          loadCandidateContent(clickColumn, row);
          
          var asinTweetHRef = document.getElementById('asinTweetHRef');
          
          var innerHTML = ("Show tweets for "
                           + candidateNames[clickColumn]
                           + "</a>");
          var count;
          if (row === undefined) {
            count = 0;
            var len = intervalCandidatePosnTweetCounts.length;
            for (var i = 0; i < len ; i++) {
              count += intervalCandidatePosnTweetCounts[i][clickColumn];
            }
          } else {
            count = intervalCandidatePosnTweetCounts[row][clickColumn];
          }
          innerHTML += (", "
                        + count
                        + " "
                        + pluralizeWord("tweet", count)
                        + " for this period.  ");
          asinTweetHRef.innerHTML = innerHTML;
          try {
            getTweets(row, dataColumn);
          } catch(ex) {
            alert("prob in getTweets: " + ex)
          }
        };
        google.visualization.events.addListener(chart, 'select', mouseEventHandler);
        initSidebar();
        
         $(document).ready(function() {
          console.log("document ready");
          
          try {
            console.log("attempting to get tweets on page load");
            loadCandidateContent(0, 3);
            getTweets(2, 0); // load Barack Obama's most recent tweets
          } catch(ex) {
            alert("prob in getTweets: " + ex)
          }
        });
      }
      
      var loadCandidateContent = function(clickColumn, row) {
        console.log("Loading Candidate " + candidateNames[clickColumn]);
        var candidateName = candidateNames[clickColumn];
        var lastName = candidateName.split(/[\s,]+/)[1];
        
        console.log('last name: ' + lastName);
        // set body class
        $("body").attr("class", candidateName);
        
        // update candidate bar
        var candidateImg = '<img src="/images/' + lastName + '.jpg" >'
        console.log(candidateImg);
        $('div#buzz_candidate_img').html(candidateImg);
        
        var mmToMonth = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec");

        var showLocalDate = function(timestamp)
        {
          var dt = new Date(timestamp);
          var mm = mmToMonth[dt.getMonth()];
          var hour = dt.getHours();
          var ap = "am";
          if (hour > 12) {
            hour = hour - 12;
            ap = "pm";
          }
          return mm + " " + dt.getDate() + ", " + dt.getFullYear() + " @ " + hour + ":00 " + ap;
        }
        $('div#buzz_candidate span#tweet_count').html(intervalCandidatePosnTweetCounts[row][clickColumn]);
        $('div#buzz_candidate strong').html(candidateName);
        $('div#buzz_candidate span#time').html("on " + showLocalDate(isoStartDates[row]));
      }

      google.setOnLoadCallback(drawVisualization);
      
      var checkOlderLinksID = 0;
      var checkNewerLinksID = 0;
      
      function hasActiveLink(id) {
        var element = document.getElementById(id);
        if (!element) return false;
        return element.hasAttribute("hasLink");
      }
      var checkOlderLinksURL = "<%= url_for :controller => 'tweets', :action => 'hasOlderPosts'  %>";
      var updateOlderLinks = function(result) {
        if (result) {
          clearInterval(checkOlderLinksID);
          checkOlderLinksID = 0;
          var olderLinksElement = document.getElementById('olderLinkWrapper');
          olderLinksElement.setAttribute("hasLink", 1);
          olderLinksElement.innerHTML = '<%= link_to "Older", :controller => "tweets", :action => "index", :startDateISO => @linkInfo[:prevLinks][:startDate],
                                       :endDateISO   => @linkInfo[:prevLinks][:endDate]  %>';
        }
      };
      var checkOlderLinks = function() {
        jQuery.getJSON(checkOlderLinksURL,
                       {startDateISO:isoStartDates[0],
                        endDateISO: gEndDate},
                        updateOlderLinks);
      };
      
      var checkNewerLinksURL = "<%= url_for :controller => 'tweets', :action => 'hasNewerPosts'  %>";
      var updateNewerLinks = function(result) {
        if (result) {
          clearInterval(checkNewerLinksID);
          checkNewerLinksID = 0;
          var newerLinksElement = document.getElementById('newerLinkWrapper');
          newerLinksElement.setAttribute("hasLink", 1);
          newerLinksElement.innerHTML = '<%= link_to "Newer", :controller => "tweets", :action => "index", :startDateISO => @linkInfo[:nextLinks][:startDate],
                                       :endDateISO   => @linkInfo[:nextLinks][:endDate]  %>';
        }
      };
      var checkNewerLinks = function() {
        jQuery.getJSON(checkNewerLinksURL,
                       {startDateISO:isoStartDates[0],
                        endDateISO: gEndDate},
                        updateNewerLinks);
      };
      
      if (!hasActiveLink('olderLinkWrapper')) {
        //Check once a minute
        checkOlderLinksID = setInterval(checkOlderLinks, 60 * 1000);
      }
      if (!hasActiveLink('newerLinkWrapper')) {
        checkNewerLinksID = setInterval(checkNewerLinks, 60 * 1000);
      }
      
      var getEndDate = function(row) {
        if (row < gNumRows - 1) {
          return isoStartDates[row  + 1]
        } else {
          return gEndDate;
        }
      };
      
      var getTweets = function(row, dataColumn) {
        var tweets_url = "<%= url_for :controller => 'tweets', :action => 'getTweets'  %>";
        var wordCloud_url = "<%= url_for :controller => 'tweets', :action => 'getWordCloud'  %>";
        var startDate, endDate;
        if (row) {
          startDate = isoStartDates[row];
              endDate = getEndDate(row);
        } else {
          startDate = isoStartDates[0];
              endDate = gEndDate;
        }
        var localCallback = function(json) {
          getTweetCallback(json);
          setTimeout(function() {
            jQuery.getJSON(wordCloud_url,
                      { candidateNum:dataColumn + 1, startDateISO:isoStartDates[0],
                        endDateISO: gEndDate
                      },
                      getWordCloudCallback);
          }, 100);
        };
        jQuery.getJSON(tweets_url,
                  { candidateNum:dataColumn + 1, startDateISO:startDate,
                    endDateISO: endDate
                  },
                  localCallback);
      };
      // ]]>
    </script>
  <% end %>
  <link href='http://fonts.googleapis.com/css?family=Paytone+One&subset=latin&v2' rel='stylesheet' type='text/css'>
</head>
<body>
  <!-- Stackato corner-banner -->
  <div style="height: 149px; overflow: hidden; position: fixed; bottom: 0; left:0;">
      <a href="http://www.activestate.com/cloud"><img  alt="Powered by Stackato"
      src="http://templates.activestate.com/images/stackato-ribbon/bottom-left.png"></a>
  </div>

  <div id="buzz_content">
    <div id="buzz_title">
        <div class="container">
            <a id="buzz_tweet" class="buzz_button_link"><img src="/images/twitter_newbird_white.png" height=35px alt="Twitter" /></a>
            <a id="buzz_help" class="buzz_button_link">?</a>
            <h1>Candidate Buzz</h1>
        </div>
    </div>

<!--     <p style="color: green"><%= notice %></p> -->
    <div id="buzz_chart">
      <%= yield %>
  
    <% if defined? @maxSize %>
      <div id="visualization"></div>
      <% if @hasLinkInfo[:prevLinks] %>
        <div id="button_time_back" class="buzz_button_link" hasLink="1"><%= link_to "&laquo; Older".html_safe, {:controller => "tweets", :action => "index", :startDateISO => @linkInfo[:prevLinks][:startDate],
                                         :endDateISO   => @linkInfo[:prevLinks][:endDate]} %></div>
      <% end %>
      <% if @hasLinkInfo[:nextLinks] %>
        <div id="button_time_forward" class="buzz_button_link" hasLink="1" hasLink="0"><%= link_to "Newer &raquo;".html_safe, :controller => "tweets", :action => "index", :startDateISO => @linkInfo[:nextLinks][:startDate],
                                         :endDateISO   => @linkInfo[:nextLinks][:endDate] %></div>
      <% end %>
    </div>
    <div id="buzz_candidate">

        <div id="buzz_candidate_img">
          
        </div>
            
        <div id="buzz_candidate_details">
          <span id="tweet_count"></span> tweets about<br />
            <strong></strong>
            <br />
            <span id="time"></span>
        </div>
            
    </div>
    <div id="buzz_details">
      <div id="buzz_tweets">
        <ul id="holder">
          
        </ul>
        <div id="twitter_controls">
          <a class="swFB buzz_button_link" id="button_back" value="Back" pgoffset="-1">&laquo;</a>
          <a class="swFB buzz_button_link" id="button_forward" value="Forward" pgoffset="1">&raquo;</a>
        </div>
      </div>
      <div id="word_cloud_wrapper" >
        <!--Word cloud will go here-->
        <div id="word_cloud" >
        </div>
      </div>
      <div id="twitter_attr">
          <p id="twitterHeader">Content from 
          <img src="/images/twitter_logo.png" alt="twitter" />
          </p>
      </div>
    </div>

      <div id="selectedColumn" style="display: none;"></div>
      <div id="twitterLink" style="display: none;">
        Show tweets for <span id="asinTweetHRef"></span>
      </div>
      <div id="stuff-container" style="display: none;">
        <div id="tweetDump" style="display: none;">
            <p id='twitterHeader'>Content from </span>
            <%= image_tag "logo_twitter_withbird_h24xw129_allblue.png" %>
            </p>
            
        </div>
        
      </div>
    <% end %>
  </div>
</body>
</html>
